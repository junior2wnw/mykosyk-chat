// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Ç "–ú–æ–π –∫–æ—Å—è–∫" - JavaScript
class ChatApp {
    constructor() {
        this.ws = null;
        this.messages = [];
        this.isLoadingOlder = false;
        this.hasMoreMessages = true;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.onlineCount = 0;
        
        this.init();
    }
    
    init() {
        this.initElements();
        this.initEventListeners();
        this.initWebSocket();
        this.loadInitialMessages();
        this.loadMessageCount();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞ –≤ localStorage
        const savedNickname = localStorage.getItem('chatNickname');
        if (savedNickname) {
            this.nicknameInput.value = savedNickname;
            this.checkFormValidity();
        }
    }
    
    initElements() {
        this.messagesContainer = document.getElementById('messagesContainer');
        this.messages = document.getElementById('messages');
        this.messageForm = document.getElementById('messageForm');
        this.nicknameInput = document.getElementById('nicknameInput');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.charCount = document.getElementById('charCount');
        this.loadingOlder = document.getElementById('loadingOlder');
        this.onlineCountEl = document.getElementById('onlineCount');
        this.totalMessagesEl = document.getElementById('totalMessages');
        this.notifications = document.getElementById('notifications');
    }
    
    initEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.messageForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.sendMessage();
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
        this.nicknameInput.addEventListener('input', () => {
            this.checkFormValidity();
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∫–∞
            localStorage.setItem('chatNickname', this.nicknameInput.value);
        });
        
        this.messageInput.addEventListener('input', () => {
            this.updateCharCounter();
            this.checkFormValidity();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Ctrl+Enter
        this.messageInput.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'Enter') {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        // –°–∫—Ä–æ–ª–ª –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.messagesContainer.addEventListener('scroll', () => {
            if (this.messagesContainer.scrollTop === 0 && !this.isLoadingOlder && this.hasMoreMessages) {
                this.loadOlderMessages();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.scrollToBottom(false);
        });
    }
    
    initWebSocket() {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsUrl = `${protocol}//${window.location.host}`;
        
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.reconnectAttempts = 0;
            this.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —á–∞—Ç—É! üöÄ', 'success');
            this.updateOnlineCount(1); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        };
        
        this.ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                this.handleWebSocketMessage(data);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        };
        
        this.ws.onclose = () => {
            console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å...', 'error');
            this.attemptReconnect();
        };
        
        this.ws.onerror = (error) => {
            console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        };
    }
    
    handleWebSocketMessage(data) {
        switch (data.type) {
            case 'newMessage':
                this.addMessage(data, true);
                break;
            case 'error':
                this.showNotification(data.message, 'error');
                break;
            default:
                console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type);
        }
    }
    
    attemptReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            setTimeout(() => {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts}`);
                this.initWebSocket();
            }, 2000 * this.reconnectAttempts);
        } else {
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        }
    }
    
    async loadInitialMessages() {
        try {
            const response = await fetch('/api/messages?limit=1000');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
            
            const messages = await response.json();
            this.clearWelcomeMessage();
            
            messages.forEach(message => {
                this.addMessage(message, false);
            });
            
            this.scrollToBottom(false);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
        }
    }
    
    async loadOlderMessages() {
        if (this.isLoadingOlder || !this.hasMoreMessages) return;
        
        this.isLoadingOlder = true;
        this.loadingOlder.style.display = 'flex';
        
        try {
            const firstMessage = this.messages.querySelector('.message');
            const beforeTimestamp = firstMessage ? 
                parseInt(firstMessage.dataset.timestamp) : Date.now();
            
            const response = await fetch(`/api/messages?limit=50&before=${beforeTimestamp}`);
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
            
            const olderMessages = await response.json();
            
            if (olderMessages.length === 0) {
                this.hasMoreMessages = false;
                this.loadingOlder.style.display = 'none';
                return;
            }
            
            const scrollHeight = this.messagesContainer.scrollHeight;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
            olderMessages.reverse().forEach(message => {
                this.addMessage(message, false, true);
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞
            this.messagesContainer.scrollTop = 
                this.messagesContainer.scrollHeight - scrollHeight;
                
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', 'error');
        } finally {
            this.isLoadingOlder = false;
            this.loadingOlder.style.display = 'none';
        }
    }
    
    async loadMessageCount() {
        try {
            const response = await fetch('/api/messages/count');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞');
            
            const data = await response.json();
            this.totalMessagesEl.textContent = data.count.toLocaleString('ru-RU');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        }
    }
    
    sendMessage() {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.showNotification('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
            return;
        }
        
        const nickname = this.nicknameInput.value.trim();
        const content = this.messageInput.value.trim();
        
        if (!nickname || !content) {
            this.showNotification('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        if (nickname.length > 50) {
            this.showNotification('–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
            return;
        }
        
        if (content.length > 1000) {
            this.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.ws.send(JSON.stringify({
            type: 'newMessage',
            nickname: nickname,
            content: content
        }));
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messageInput.value = '';
        this.updateCharCounter();
        this.checkFormValidity();
        this.messageInput.focus();
    }
    
    addMessage(messageData, isNew = false, prepend = false) {
        const messageEl = document.createElement('div');
        messageEl.className = 'message';
        messageEl.dataset.timestamp = messageData.timestamp;
        
        const time = new Date(parseInt(messageData.timestamp));
        const timeString = time.toLocaleString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
        
        messageEl.innerHTML = `
            <div class="message-header">
                <span class="message-nickname">${this.escapeHtml(messageData.nickname)}</span>
                <span class="message-time">${timeString}</span>
            </div>
            <div class="message-content">${this.escapeHtml(messageData.content)}</div>
        `;
        
        if (prepend) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            this.messages.insertBefore(messageEl, this.messages.firstChild);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü (–¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            this.messages.appendChild(messageEl);
        }
        
        if (isNew) {
            this.scrollToBottom(true);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            const currentCount = parseInt(this.totalMessagesEl.textContent.replace(/\s/g, '')) || 0;
            this.totalMessagesEl.textContent = (currentCount + 1).toLocaleString('ru-RU');
        }
    }
    
    clearWelcomeMessage() {
        const welcomeMessage = this.messages.querySelector('.welcome-message');
        if (welcomeMessage && this.messages.children.length > 1) {
            welcomeMessage.remove();
        }
    }
    
    scrollToBottom(smooth = true) {
        const scrollOptions = {
            top: this.messagesContainer.scrollHeight,
            behavior: smooth ? 'smooth' : 'auto'
        };
        this.messagesContainer.scrollTo(scrollOptions);
    }
    
    checkFormValidity() {
        const nickname = this.nicknameInput.value.trim();
        const content = this.messageInput.value.trim();
        const isValid = nickname.length > 0 && content.length > 0 && 
                       nickname.length <= 50 && content.length <= 1000;
        
        this.sendBtn.disabled = !isValid;
    }
    
    updateCharCounter() {
        const length = this.messageInput.value.length;
        this.charCount.textContent = length;
        
        if (length > 900) {
            this.charCount.style.color = '#ef4444';
        } else if (length > 800) {
            this.charCount.style.color = '#f59e0b';
        } else {
            this.charCount.style.color = 'var(--text-muted)';
        }
    }
    
    updateOnlineCount(count) {
        this.onlineCount = Math.max(1, count);
        this.onlineCountEl.textContent = this.onlineCount;
    }
    
    showNotification(message, type = 'info') {
        const notificationEl = document.createElement('div');
        notificationEl.className = `notification ${type}`;
        notificationEl.textContent = message;
        
        this.notifications.appendChild(notificationEl);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notificationEl.parentNode) {
                notificationEl.style.animation = 'notificationSlideOut 0.3s ease-in forwards';
                setTimeout(() => {
                    notificationEl.remove();
                }, 300);
            }
        }, 5000);
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const additionalStyles = `
    @keyframes notificationSlideOut {
        to {
            opacity: 0;
            transform: translateX(100%);
        }
    }
    
    @keyframes bounce {
        0%, 20%, 53%, 80%, 100% {
            transform: translate3d(0,0,0);
        }
        40%, 43% {
            transform: translate3d(0, -8px, 0);
        }
        70% {
            transform: translate3d(0, -4px, 0);
        }
        90% {
            transform: translate3d(0, -2px, 0);
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
const styleSheet = document.createElement('style');
styleSheet.textContent = additionalStyles;
document.head.appendChild(styleSheet);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    window.chatApp = new ChatApp();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.chatApp && window.chatApp.ws) {
        window.chatApp.ws.close();
    }
});

// –ü–∞—Å—Ö–∞–ª–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
console.log(`
üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–ú–æ–π –∫–æ—Å—è–∫"!
üí¨ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏
üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ
‚ö° Powered by WebSocket + Node.js + SQLite

–ù–∞—à–µ–ª –±–∞–≥? –ï—Å—Ç—å –∏–¥–µ–∏? –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç! üòâ
`);
