const express = require('express');
const WebSocket = require('ws');
const sqlite3 = require('sqlite3').verbose();
const { v4: uuidv4 } = require('uuid');
const path = require('path');
const http = require('http');

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server: server });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./chat.db');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
db.serialize(function() {
    db.run("CREATE TABLE IF NOT EXISTS messages (id TEXT PRIMARY KEY, nickname TEXT NOT NULL, content TEXT NOT NULL, timestamp INTEGER NOT NULL)");
    db.run("CREATE INDEX IF NOT EXISTS idx_timestamp ON messages(timestamp DESC)");
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const clients = new Set();

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
wss.on('connection', function(ws) {
    console.log('–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    clients.add(ws);
    
    ws.on('message', function(data) {
        try {
            const message = JSON.parse(data);
            
            if (message.type === 'newMessage') {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                if (!message.nickname || !message.content || 
                    message.nickname.trim().length === 0 || 
                    message.content.trim().length === 0 ||
                    message.nickname.length > 50 ||
                    message.content.length > 1000) {
                    ws.send(JSON.stringify({
                        type: 'error',
                        message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
                    }));
                    return;
                }
                
                const messageId = uuidv4();
                const timestamp = Date.now();
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db.run(
                    'INSERT INTO messages (id, nickname, content, timestamp) VALUES (?, ?, ?, ?)',
                    [messageId, message.nickname.trim(), message.content.trim(), timestamp],
                    function(err) {
                        if (err) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                            ws.send(JSON.stringify({
                                type: 'error',
                                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
                            }));
                            return;
                        }
                        
                        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
                        const broadcastMessage = {
                            type: 'newMessage',
                            id: messageId,
                            nickname: message.nickname.trim(),
                            content: message.content.trim(),
                            timestamp: timestamp
                        };
                        
                        clients.forEach(function(client) {
                            if (client.readyState === WebSocket.OPEN) {
                                client.send(JSON.stringify(broadcastMessage));
                            }
                        });
                    }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            ws.send(JSON.stringify({
                type: 'error',
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            }));
        }
    });
    
    ws.on('close', function() {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        clients.delete(ws);
    });
    
    ws.on('error', function(error) {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
        clients.delete(ws);
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages', function(req, res) {
    const limit = parseInt(req.query.limit) || 1000;
    const before = req.query.before ? parseInt(req.query.before) : Date.now() + 1;
    
    if (limit > 1000) {
        return res.status(400).json({ error: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç 1000 —Å–æ–æ–±—â–µ–Ω–∏–π' });
    }
    
    db.all(
        'SELECT id, nickname, content, timestamp FROM messages WHERE timestamp < ? ORDER BY timestamp DESC LIMIT ?',
        [before, limit],
        function(err, rows) {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
                return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ –≤–Ω–∏–∑—É)
            res.json(rows.reverse());
        }
    );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/count', function(req, res) {
    db.get('SELECT COUNT(*) as count FROM messages', function(err, row) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
        res.json({ count: row.count });
    });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', function(req, res) {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use(function(req, res) {
    res.status(404).send('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
});

const PORT = process.env.PORT || 8080;

server.listen(PORT, '0.0.0.0', function() {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä "–ú–æ–π –∫–æ—Å—è–∫" –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ' + PORT);
    console.log('üì± –û—Ç–∫—Ä–æ–π http://localhost:' + PORT + ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç–∏—Ç—å—Å—è!');
});

// Graceful shutdown
process.on('SIGINT', function() {
    console.log('\nüì¥ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    clients.forEach(function(client) {
        if (client.readyState === WebSocket.OPEN) {
            client.close();
        }
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.close(function(err) {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        }
        console.log('üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
        process.exit(0);
    });
});
